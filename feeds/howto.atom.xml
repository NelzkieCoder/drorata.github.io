<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dr. Dror - HowTo</title><link href="http://drorata.github.io/" rel="alternate"></link><link href="http://drorata.github.io/feeds/howto.atom.xml" rel="self"></link><id>http://drorata.github.io/</id><updated>2017-04-03T00:00:00+02:00</updated><entry><title>Useful Docker hints</title><link href="http://drorata.github.io/posts/2017/Apr/03/useful-docker-hints/" rel="alternate"></link><published>2017-04-03T00:00:00+02:00</published><updated>2017-04-03T00:00:00+02:00</updated><author><name>Dror Atariah</name></author><id>tag:drorata.github.io,2017-04-03:/posts/2017/Apr/03/useful-docker-hints/</id><summary type="html">&lt;p&gt;Recently, I started to use and get to know &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;.
One of my central motivations is to utilize this technology for the creation of &lt;a href="https://github.com/drorata/mwe-jupyter-docker"&gt;reproducible research/work&lt;/a&gt;.
While preparing this image, I came across many useful items; I collected some of them in this post.&lt;/p&gt;
&lt;h2 id="connecting-two-containers-over-network-1"&gt;Connecting two containers over network …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;Recently, I started to use and get to know &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;.
One of my central motivations is to utilize this technology for the creation of &lt;a href="https://github.com/drorata/mwe-jupyter-docker"&gt;reproducible research/work&lt;/a&gt;.
While preparing this image, I came across many useful items; I collected some of them in this post.&lt;/p&gt;
&lt;h2 id="connecting-two-containers-over-network-1"&gt;Connecting two containers over network &lt;sup id="fnref-7e76b2d7"&gt;&lt;a class="footnote-ref" href="#fn-7e76b2d7"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;First, start a new network:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker network create new-network
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, start the two containers as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -i -t --name cont1 --net&lt;span class="o"&gt;=&lt;/span&gt;new-network --net-alias&lt;span class="o"&gt;=&lt;/span&gt;cont1 drorata/base-image /bin/bash
docker run -i -t --name cont2 --net&lt;span class="o"&gt;=&lt;/span&gt;new-network --net-alias&lt;span class="o"&gt;=&lt;/span&gt;cont2 drorata/base-image /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="stop-remove-all-running-containers-2"&gt;Stop / Remove all running containers &lt;sup id="fnref-15cde0e3"&gt;&lt;a class="footnote-ref" href="#fn-15cde0e3"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker stop &lt;span class="k"&gt;$(&lt;/span&gt;docker ps -a -q&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last part generates a list of IDs and in turn this list is passed to the &lt;code&gt;stop&lt;/code&gt; command.
Similarly,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker rm &lt;span class="k"&gt;$(&lt;/span&gt;docker ps -a -q&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will remove all the stoped containers.
You can use the &lt;code&gt;-f&lt;/code&gt; option for the &lt;code&gt;rm&lt;/code&gt; for (brutally) stopping and removing all containers.&lt;/p&gt;
&lt;h2 id="leave-a-container-and-keep-in-alive"&gt;Leave a container and keep in alive&lt;/h2&gt;
&lt;p&gt;If you start a new container in interactive mode and enter the shell, like in &lt;code&gt;docker run -i -t ubuntu&lt;/code&gt;, and exit it, Docker will stop the container.
You can check it using &lt;code&gt;docker ps -a&lt;/code&gt;.
The reason is that the process you asked has terminated and the container is stopped.
To avoid it, you can hit &lt;code&gt;CTRL+P CTRL+Q&lt;/code&gt;.
See this short and excellent &lt;a href="http://stackoverflow.com/questions/25267372/correct-way-to-detach-from-a-container-without-stopping-it"&gt;answer&lt;/a&gt; and don't forget to read also &lt;a href="http://stackoverflow.com/a/25268154/671013"&gt;this one&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="using-anaconda-from-docker"&gt;Using Anaconda from Docker&lt;/h2&gt;
&lt;p&gt;First, you can run a simple container having full–fledged Anaconda installation.
It is as simple as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -i -t --name conda-base continuumio/anaconda3 /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once running, you can python in the container as much as you want.
As Jupyter is an important part of the work, let's discuss how to use it.
From the container's terminal you can start Jupyter but that won't be enough.
The &lt;code&gt;localhost&lt;/code&gt; of the container is not the same as of the host OS.
We'd have to enable port forwarding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -i -t -p &lt;span class="m"&gt;8888&lt;/span&gt;:8888 --name conda-base continuumio/anaconda3 /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, in the new container's shell run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter notebook --ip&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; --port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8888&lt;/span&gt; --no-browser
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to the address where the notebook is served and enjoy.
There's one thing missing still, the nice notebooks don't have a place to be saved.
They can be saved of course in the container, but they won't persists once you stop it.
You should mount a local directory (on the host) as a data volume:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -i -t -p 8888:8888 --name conda-base -v ~/tmp:/opt/notebooks continuumio/anaconda3 /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and inside the container, execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter notebook --notebook-dir&lt;span class="o"&gt;=&lt;/span&gt;/opt/notebooks --ip&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; --port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8888&lt;/span&gt; --no-browser
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, what ever notebook you save from within the container, it will be also available on &lt;code&gt;~/tmp&lt;/code&gt;.
If, for some reason, the container stopped, you can reuse it: &lt;code&gt;docker exec -it conda-base /bin/bash&lt;/code&gt;.
Lastly, putting everything together, you can instantiate a new container as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -i -t -p &lt;span class="m"&gt;8888&lt;/span&gt;:8888 -v ~/tmp:/opt/notebooks --name conda-base continuumio/anaconda3 /bin/bash -c &lt;span class="s2"&gt;&amp;quot;/opt/conda/bin/jupyter notebook --notebook-dir=/opt/notebooks --ip=&amp;#39;*&amp;#39; --port=8888 --no-browser&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/tutorials/dockervolumes/#mount-a-host-directory-as-a-data-volume"&gt;Mounting local directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.continuum.io/blog/developer-blog/anaconda-and-docker-better-together-reproducible-data-science"&gt;Running notebook from a container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="location-of-images-3"&gt;Location of images &lt;sup id="fnref-167a330e"&gt;&lt;a class="footnote-ref" href="#fn-167a330e"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;On Mac images are stored in a file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="running-pyspark-within-jupyter"&gt;Running PySpark within Jupyter&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/jupyter/docker-stacks/tree/master/pyspark-notebook"&gt;pyspark-notebook&lt;/a&gt; image seems to be a simple and straightforward way to get started with Spark.
Simply run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -it --rm -p &lt;span class="m"&gt;8888&lt;/span&gt;:8888 jupyter/pyspark-notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Naturally, you can also mount a local directory for persiting the generated notebooks.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-7e76b2d7"&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/25324860/how-to-create-a-bidirectional-link-between-containers/35577068#35577068"&gt;source&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-7e76b2d7" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-15cde0e3"&gt;
&lt;p&gt;&lt;a href="https://coderwall.com/p/ewk0mq/stop-remove-all-docker-containers"&gt;source&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-15cde0e3" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-167a330e"&gt;
&lt;p&gt;&lt;a href="https://forums.docker.com/t/where-are-images-stored-on-mac-os-x/17165/2"&gt;source&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-167a330e" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="docker"></category><category term="reproducible"></category><category term="research"></category><category term="jupyter"></category></entry><entry><title>My getting started with Atom</title><link href="http://drorata.github.io/posts/2017/Jan/20/my-getting-started-with-atom/" rel="alternate"></link><published>2017-01-20T00:00:00+01:00</published><updated>2017-01-20T00:00:00+01:00</updated><author><name>Dror Atariah</name></author><id>tag:drorata.github.io,2017-01-20:/posts/2017/Jan/20/my-getting-started-with-atom/</id><summary type="html">&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I recently discovered Atom.
In the past, I've been using Emacs but not so long ago I realized that it is time to move on.
Sublime Text 3 was the next editor, but only for a short while.
Getting to know Atom and the fact it is free made …&lt;/p&gt;</summary><content type="html">&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I recently discovered Atom.
In the past, I've been using Emacs but not so long ago I realized that it is time to move on.
Sublime Text 3 was the next editor, but only for a short while.
Getting to know Atom and the fact it is free made me move.
In this post, I'd like to share with you some of my initial learnings and settings that I came up with.&lt;/p&gt;
&lt;h1 id="general"&gt;General&lt;/h1&gt;
&lt;h2 id="settings"&gt;Settings&lt;/h2&gt;
&lt;p&gt;On Mac, hitting &lt;code&gt;CMD ,&lt;/code&gt; brings up the settings page.
To be honest the default settings, for the most part, are perfect.
I only added to the &lt;code&gt;Non Word Character&lt;/code&gt; the underscore &lt;code&gt;_&lt;/code&gt;; this allows moving forward and backwards more easily over whole words.&lt;/p&gt;
&lt;h2 id="packages"&gt;Packages&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Some of the packages I mention below are pre-installed and some you'd have to install by yourself.&lt;/p&gt;
&lt;h3 id="advanced-open-file"&gt;&lt;a href="https://atom.io/packages/advanced-open-file"&gt;advanced-open-file&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This allows easy file opening.
By enabling the following two, this package will remind you the beloved &lt;code&gt;ido&lt;/code&gt; Emacs mode:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enable &lt;code&gt;Fuzzy Matching&lt;/code&gt;: smarter searching&lt;/li&gt;
&lt;li&gt;Enable &lt;code&gt;Shortcuts for fast directory switching&lt;/code&gt;: This will make &lt;code&gt;~/&lt;/code&gt; jump directly to your home directory&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="highlight-selected"&gt;&lt;a href="https://atom.io/packages/highlight-selected"&gt;highlight selected&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This allows the highlighting of all the instances of a selected word in the current file.
Very handy.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example" src="http://drorata.github.io/images/atom-getting-started-highlight-selected.gif"&gt;&lt;/p&gt;
&lt;h3 id="pretty-json"&gt;&lt;a href="https://atom.io/packages/pretty-json"&gt;pretty json&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This will simply allow prettifying JSONs.&lt;/p&gt;
&lt;h3 id="platformio-ide-terminal"&gt;&lt;a href="https://atom.io/packages/platformio-ide-terminal"&gt;platformio ide terminal&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Adds a terminal to Atom.
I am still not fluent in terms of the key bindings, but this should be helpful.
By the way, as I'm using &lt;a href="https://github.com/banga/powerline-shell"&gt;Powerline-shell&lt;/a&gt; for my terminal, I had to configure the font of this package.
This can be easily achieved in the package's settings.&lt;/p&gt;
&lt;p&gt;For easier switching between the terminal and the open file(s), I added the following to &lt;code&gt;~/.atom/init.coffee&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onDidActivatePackage&lt;/span&gt; &lt;span class="nf"&gt;(pack) -&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;platformio-ide-terminal&amp;#39;&lt;/span&gt;
    &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;atom-workspace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;#39;editor:focus-main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nv"&gt;p = &lt;/span&gt;&lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getActivePane&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nv"&gt;panels = &lt;/span&gt;&lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBottomPanels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nv"&gt;term = &lt;/span&gt;&lt;span class="nx"&gt;panels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="nf"&gt;(pan) -&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;pan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;PlatformIOTerminalView&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;pan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;term&lt;/span&gt;
          &lt;span class="c1"&gt;# Open a new terminal&lt;/span&gt;
          &lt;span class="nv"&gt;editor = &lt;/span&gt;&lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getActiveTextEditor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;platformio-ide-terminal:new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;term&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focused&lt;/span&gt; &lt;span class="o"&gt;isnt&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
          &lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;term&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focused&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
          &lt;span class="nx"&gt;term&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Stops the terminal from blinking&lt;/span&gt;
          &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, I don't remember where I found this.&lt;/p&gt;
&lt;h3 id="whitespace"&gt;&lt;a href="https://atom.io/packages/whitespace"&gt;whitespace&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This will remove trailing whitespace upon saving.
Remember that this is very helpful when it comes to putting your code/text under versioning control.&lt;/p&gt;
&lt;h2 id="additional-languages"&gt;Additional languages&lt;/h2&gt;
&lt;p&gt;If you're writing in a language which is not natively supported by Atom, you can most likely add it.
In my case, I add &lt;a href="https://atom.io/packages/language-ini"&gt;language-ini&lt;/a&gt; to support the editing of INI files.&lt;/p&gt;
&lt;h2 id="spell-checking"&gt;Spell checking&lt;/h2&gt;
&lt;p&gt;There's a pre-installed package to handle this.
Probably, at some point I'll look deeper into it.
Ultimately, I'd like to have it enabled inside the comments of any code but not in its body.
That's on the todo list.&lt;/p&gt;
&lt;h1 id="python-related"&gt;Python related&lt;/h1&gt;
&lt;p&gt;I work a lot with Python, to that end, there are several hacks I found to be useful.&lt;/p&gt;
&lt;h2 id="hydrogen"&gt;&lt;a href="https://atom.io/packages/Hydrogen"&gt;Hydrogen&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This allows the evaluation of Python lines &lt;em&gt;within&lt;/em&gt; the editor!
It spawns a Jupyter kernel and uses it.&lt;/p&gt;
&lt;h2 id="autocomplete-python"&gt;&lt;a href="https://atom.io/packages/autocomplete-python"&gt;autocomplete python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;More advanced autocompletion; it looks up the doc-strings, identifies variables and functions etc.
To enable this one, I had to
1. Re-install the &lt;code&gt;six&lt;/code&gt; module. Simply had to run &lt;code&gt;conda install -f six&lt;/code&gt;
2. Point to the location of my Anaconda installation.&lt;/p&gt;
&lt;p&gt;On the todo list is to make sure that this package is aware of Python environments.&lt;/p&gt;
&lt;h1 id="next-steps"&gt;Next steps&lt;/h1&gt;
&lt;p&gt;There are so many more things to learn and define with Atom.
Here are some ideas:
- Learn how to use git from within Atom. This must be fun as, after all, Atom was developed by GitHub
- Improve the integration of Atom, Markdown and Pelican to enable easier blogging&lt;/p&gt;</content><category term="atom"></category><category term="python"></category><category term="editor"></category><category term="superuser"></category></entry><entry><title>Experiment with Jupyter</title><link href="http://drorata.github.io/posts/2017/Jan/18/experiment-with-jupyter/" rel="alternate"></link><published>2017-01-18T00:00:00+01:00</published><updated>2017-01-18T00:00:00+01:00</updated><author><name>Dror Atariah</name></author><id>tag:drorata.github.io,2017-01-18:/posts/2017/Jan/18/experiment-with-jupyter/</id><summary type="html">&lt;p&gt;Outline how to utilize Jupyter notebooks.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Using the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags"&gt;liquid_tags&lt;/a&gt; plugin, it seems to be very simple to include Jupyter notebooks. You have to add the plugin in &lt;code&gt;pelicanconf.py&lt;/code&gt;; e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;plugins&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;render_math&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;liquid_tags.notebook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where in my case the plugins are located in &lt;code&gt;[site's root]/plugins&lt;/code&gt;.
Next, create a directory &lt;code&gt;[site's root]/content/notebooks&lt;/code&gt; and add a notebook in there.
Lastly, create a new Markdown post and include the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% notebook factorial-sample.ipynb %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;factorial-sample.ipynb&lt;/code&gt; is the notebook's filename.
Don't forget to include in the post (&lt;code&gt;.md&lt;/code&gt;) the needed metadata like &lt;code&gt;Title&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt; etc.&lt;/p&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;The next line till the end of the post is coming from a notebook:&lt;/p&gt;
&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Simple implementation of a factorial method&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Example&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[7]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;3628800&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/p&gt;</content><category term="python"></category><category term="jupyter"></category><category term="pelican"></category><category term="blogging"></category></entry><entry><title>Installing Spark on macOS (Sierra)</title><link href="http://drorata.github.io/posts/2017/Jan/16/installing-spark-on-macos-sierra/" rel="alternate"></link><published>2017-01-16T00:00:00+01:00</published><updated>2017-01-16T00:00:00+01:00</updated><author><name>Dror Atariah</name></author><id>tag:drorata.github.io,2017-01-16:/posts/2017/Jan/16/installing-spark-on-macos-sierra/</id><summary type="html">&lt;p&gt;How did I install Spark on my macOS&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#download-spark"&gt;Download Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-and-test"&gt;Set and test&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tree-structure"&gt;Tree structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#environment-variables"&gt;Environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#test"&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-ipython-and-jupyter"&gt;Use IPython and Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="download-spark"&gt;Download Spark&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;First, download Spark.
I downloaded the binaries given as &lt;a href="http://d3kbcqa49mib13.cloudfront.net/spark-2.1.0-bin-hadoop2.7.tgz"&gt;&lt;code&gt;spark-2.1.0-bin-hadoop2.7&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You'd also need to install the JDK; I took it from &lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="set-and-test"&gt;Set and test&lt;/h1&gt;
&lt;h2 id="tree-structure"&gt;Tree structure&lt;/h2&gt;
&lt;p&gt;Simply installing Spark is simple.
All you have to do is extract the archive.
I placed the extracted binaries in &lt;code&gt;~/Applications&lt;/code&gt;, resulting in the following tree structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/Applications
└── spark-2.1.0-bin-hadoop2.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, you can already run Spark.
Look for &lt;code&gt;~/Applications/spark-2.1.0-bin-hadoop2.7/bin/pyspark&lt;/code&gt;.
For simplifying the settings, I created a symbolic link to &lt;code&gt;~/Applications/spark&lt;/code&gt;, in particular using &lt;code&gt;ln -s spark-2.1.0-bin-hadoop2.7 spark&lt;/code&gt;, yielding the following structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/Applications
├── spark -&amp;gt; spark-2.1.0-bin-hadoop2.7
└── spark-2.1.0-bin-hadoop2.7
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="environment-variables"&gt;Environment variables&lt;/h2&gt;
&lt;p&gt;Next step, is to set environment variables.
In particular, I added the following lines to &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SPARK_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Users/user/Applications/spark&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYSPARK_SUBMIT_ARGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--master local[2]&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# Make pyspark available anywhere&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SPARK_HOME&lt;/span&gt;&lt;span class="s2"&gt;/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Remark:&lt;/em&gt; &lt;code&gt;spark-shell&lt;/code&gt; (i.e. the scala based REPL) should also be accessible at this point.&lt;/p&gt;
&lt;h2 id="test"&gt;Test&lt;/h2&gt;
&lt;p&gt;Now, it is time fore testing.
Start a new terminal session, or source &lt;code&gt;/.bash_profile&lt;/code&gt;.
Now, simply run &lt;code&gt;pyspark&lt;/code&gt;.
You should get a Python REPL console with the &lt;code&gt;SparkContext&lt;/code&gt; already loaded as &lt;code&gt;sc&lt;/code&gt;.
Tryout:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parallelize&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and create a simple RDD.&lt;/p&gt;
&lt;h1 id="use-ipython-and-jupyter"&gt;Use &lt;code&gt;IPython&lt;/code&gt; and &lt;code&gt;Jupyter&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The standard Python REPL is, somehow, crappy.
You probably want to use &lt;code&gt;IPython&lt;/code&gt; and even better &lt;code&gt;Jupyter&lt;/code&gt;.
To that end, I added the following to my &lt;code&gt;./bash_profile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYSPARK_PYTHON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/drorata/anaconda3
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYSPARK_DRIVER_PYTHON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/drorata/anaconda3/bin/ipython
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pysparknb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PYSPARK_DRIVER_PYTHON=&amp;quot;jupyter&amp;quot; PYSPARK_DRIVER_PYTHON_OPTS=&amp;quot;notebook&amp;quot; pyspark&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way, whenever I invoke &lt;code&gt;pyspark&lt;/code&gt; a nice IPython console is started.
In addition &lt;code&gt;pysparknb&lt;/code&gt; starts a Jupyter server in the current directory.&lt;/p&gt;</content><category term="spark"></category><category term="jupyter"></category><category term="python"></category></entry></feed>